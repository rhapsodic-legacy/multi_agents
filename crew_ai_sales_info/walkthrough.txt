# CrewAI Multi-Agent Sales Lead Generation and Nurturing System

This tutorial demonstrates how to create a multi-agent system for sales lead generation and nurturing using CrewAI. Two AI agents collaborate to identify and engage high-value leads: a Sales Representative and a Lead Sales Representative.

## Quick Start

### Step 1: Install Required Packages

```bash
pip install crewai==0.28.8 crewai_tools==0.1.6 langchain_community==0.0.29
```

### Step 2: Create Utils Module (utils.py)

First, create a `utils.py` file with your API key functions:

```python
# utils.py
def get_openai_api_key():
    # Replace with your actual OpenAI API key
    return "your_openai_api_key_here"

def get_serper_api_key():
    # Replace with your actual Serper API key
    return "your_serper_api_key_here"

def pretty_print_result(result):
    print("="*50)
    print("CREW EXECUTION RESULT")
    print("="*50)
    print(result)
    print("="*50)
```

### Step 3: Complete Working Script (main.py)

```python
# main.py
import warnings
import os
from utils import get_openai_api_key, get_serper_api_key
from crewai import Agent, Task, Crew
from crewai_tools import DirectoryReadTool, FileReadTool, SerperDevTool, BaseTool

# Suppress warnings
warnings.filterwarnings('ignore')

# Set up API keys
openai_api_key = get_openai_api_key()
os.environ["OPENAI_API_KEY"] = openai_api_key
os.environ["OPENAI_MODEL_NAME"] = 'gpt-3.5-turbo'
os.environ["SERPER_API_KEY"] = get_serper_api_key()

# Define agents
sales_rep_agent = Agent(
    role="Sales Representative",
    goal="Identify high-value leads that match our ideal customer profile",
    backstory=(
        "As a part of the dynamic sales team at CrewAI, your mission is to scour "
        "the digital landscape for potential leads. Armed with cutting-edge tools "
        "and a strategic mindset, you analyze data, trends, and interactions to "
        "unearth opportunities that others might overlook. Your work is crucial in paving "
        "the way for meaningful engagements and driving the company's growth."
    ),
    allow_delegation=False,
    verbose=True
)

lead_sales_rep_agent = Agent(
    role="Lead Sales Representative",
    goal="Nurture leads with personalized, compelling communications",
    backstory=(
        "Within the vibrant ecosystem of CrewAI's sales department, you stand out as the "
        "bridge between potential clients and the solutions they need. By creating engaging, "
        "personalized messages, you not only inform leads about our offerings but also make "
        "them feel seen and heard. Your role is pivotal in converting interest into action, "
        "guiding leads through the journey from curiosity to commitment."
    ),
    allow_delegation=False,
    verbose=True
)

# Set up tools
directory_read_tool = DirectoryReadTool(directory='./instructions')
file_read_tool = FileReadTool()
search_tool = SerperDevTool()

# Custom Sentiment Analysis Tool
class SentimentAnalysisTool(BaseTool):
    name: str = "Sentiment Analysis Tool"
    description: str = "Analyzes the sentiment of text to ensure positive and engaging communication."
    
    def _run(self, text: str) -> str:
        # Placeholder logic; replace with actual sentiment analysis in production
        return "positive"

sentiment_analysis_tool = SentimentAnalysisTool()

# Define tasks
lead_profiling_task = Task(
    description=(
        "Conduct an in-depth analysis of {lead_name}, a company in the {industry} sector "
        "that recently showed interest in our solutions. Utilize all available data sources "
        "to compile a detailed profile, focusing on key decision-makers, recent business "
        "developments, and potential needs that align with our offerings. This task is crucial "
        "for tailoring our engagement strategy effectively.\n"
        "Don't make assumptions and only use information you absolutely sure about."
    ),
    expected_output=(
        "A comprehensive report on {lead_name}, including company background, key personnel, "
        "recent milestones, and identified needs. Highlight potential areas where our solutions "
        "can provide value, and suggest personalized engagement strategies."
    ),
    tools=[directory_read_tool, file_read_tool, search_tool],
    agent=sales_rep_agent,
)

personalized_outreach_task = Task(
    description=(
        "Using the insights gathered from the lead profiling report on {lead_name}, craft a "
        "personalized outreach campaign aimed at {key_decision_maker}, the {position} of "
        "{lead_name}. The campaign should address their recent {milestone} and how our solutions "
        "can support their goals. Your communication must resonate with {lead_name}'s company "
        "culture and values, demonstrating a deep understanding of their business and needs.\n"
        "Don't make assumptions and only use information you absolutely sure about."
    ),
    expected_output=(
        "A series of personalized email drafts tailored to {lead_name}, specifically targeting "
        "{key_decision_maker}. Each draft should include a compelling narrative that connects our "
        "solutions with their recent achievements and future goals. Ensure the tone is engaging, "
        "professional, and aligned with {lead_name}'s corporate identity."
    ),
    tools=[sentiment_analysis_tool, search_tool],
    agent=lead_sales_rep_agent,
)

# Create and run crew
crew = Crew(
    agents=[sales_rep_agent, lead_sales_rep_agent],
    tasks=[lead_profiling_task, personalized_outreach_task],
    verbose=2,
    memory=True
)

# Execute with sample input
inputs = {
    "lead_name": "General Electric",
    "industry": "Nuclear Power",
    "key_decision_maker": "Larry Culp",
    "position": "CEO",
    "milestone": "fusion reactor"
}

result = crew.kickoff(inputs=inputs)

# Display results
print("="*50)
print("CREW EXECUTION RESULT")
print("="*50)
print(result)
print("="*50)
```

### Step 4: Create Instructions Directory (Optional)

Create an `instructions` directory with any reference files your agents might need:

```bash
mkdir instructions
```

Add any relevant files to this directory that your agents should reference.

## Jupyter Notebook Version

If you prefer to run this in a Jupyter notebook:

```python
# Jupyter Notebook Cell 1: Setup
import warnings
import os
from utils import get_openai_api_key, get_serper_api_key
from crewai import Agent, Task, Crew
from crewai_tools import DirectoryReadTool, FileReadTool, SerperDevTool, BaseTool
from IPython.display import Markdown

warnings.filterwarnings('ignore')

# Set up API keys
openai_api_key = get_openai_api_key()
os.environ["OPENAI_API_KEY"] = openai_api_key
os.environ["OPENAI_MODEL_NAME"] = 'gpt-3.5-turbo'
os.environ["SERPER_API_KEY"] = get_serper_api_key()
```

```python
# Jupyter Notebook Cell 2: Define Agents and Tools
# [Copy the agent definitions, tools, and tasks from main.py here]
```

```python
# Jupyter Notebook Cell 3: Execute
crew = Crew(
    agents=[sales_rep_agent, lead_sales_rep_agent],
    tasks=[lead_profiling_task, personalized_outreach_task],
    verbose=2,
    memory=True
)

inputs = {
    "lead_name": "General Electric",
    "industry": "Nuclear Power",
    "key_decision_maker": "Larry Culp",
    "position": "CEO",
    "milestone": "fusion reactor"
}

result = crew.kickoff(inputs=inputs)
Markdown(result)
```

## Customization Examples

### Example 1: Different Lead Information

```python
# Change the target company
inputs = {
    "lead_name": "Tesla",
    "industry": "Automotive",
    "key_decision_maker": "Elon Musk",
    "position": "CEO",
    "milestone": "launch of new electric vehicle model"
}

result = crew.kickoff(inputs=inputs)
```

### Example 2: Add Web Scraping Tool

```python
from crewai_tools import ScrapeWebsiteTool

# Add scraping tool
scrape_tool = ScrapeWebsiteTool()
lead_profiling_task.tools.append(scrape_tool)
```

### Example 3: Technical Sales Specialist

```python
# Modified agent for technical focus
technical_sales_agent = Agent(
    role="Technical Sales Specialist",
    goal="Nurture leads with technically detailed and solution-oriented communications",
    backstory=(
        "As a technical expert in CrewAI's sales team, you excel at crafting messages that "
        "highlight the technical benefits of our solutions. You provide detailed insights to "
        "decision-makers, ensuring they understand how our offerings meet their specific needs."
    ),
    allow_delegation=False,
    verbose=True
)

# Update the crew with the new agent
crew = Crew(
    agents=[sales_rep_agent, technical_sales_agent],
    tasks=[lead_profiling_task, personalized_outreach_task],
    verbose=2,
    memory=True
)
```

## Troubleshooting

### Common Issues and Solutions

1. **API Key Errors**
   ```python
   # Verify your API keys are set correctly
   print("OpenAI API Key set:", "OPENAI_API_KEY" in os.environ)
   print("Serper API Key set:", "SERPER_API_KEY" in os.environ)
   ```

2. **Directory Not Found**
   ```python
   # Create instructions directory if it doesn't exist
   import os
   if not os.path.exists('./instructions'):
       os.makedirs('./instructions')
   ```

3. **Reduce Verbose Output**
   ```python
   # Less verbose execution
   crew = Crew(
       agents=[sales_rep_agent, lead_sales_rep_agent],
       tasks=[lead_profiling_task, personalized_outreach_task],
       verbose=1,  # or verbose=False
       memory=True
   )
   ```

4. **Disable Memory**
   ```python
   # If memory causes issues
   crew = Crew(
       agents=[sales_rep_agent, lead_sales_rep_agent],
       tasks=[lead_profiling_task, personalized_outreach_task],
       verbose=2,
       memory=False
   )
   ```

## Quick Test Script

Create a minimal test to verify everything works:

```python
# test_crewai.py
import os
from utils import get_openai_api_key, get_serper_api_key

# Test API key functions
try:
    openai_key = get_openai_api_key()
    serper_key = get_serper_api_key()
    print("✓ API keys retrieved successfully")
except Exception as e:
    print(f"✗ Error retrieving API keys: {e}")

# Test CrewAI import

try:
    from crewai import Agent, Task, Crew
    from crewai_tools import SerperDevTool
    print("✓ CrewAI imported successfully")
except ImportError as e:
    print(f"✗ CrewAI import error: {e}")
    print("Run: pip install crewai==0.28.8 crewai_tools==0.1.6 langchain_community==0.0.29")
```

## Next Steps

1. **Test with different companies**: Try various lead inputs
2. **Enhance the sentiment analysis tool**: Integrate TextBlob or VADER
3. **Add more tools**: CRM connectors, LinkedIn scrapers, etc.
4. **Create specialized agents**: Lead qualifier, follow-up scheduler
5. **Integrate with databases**: Connect to CRM systems or lead databases

## File Structure

Your project should look like this:

```
your_project/
├── main.py
├── utils.py
├── test_crewai.py
└── instructions/
    └── (optional reference files)
```