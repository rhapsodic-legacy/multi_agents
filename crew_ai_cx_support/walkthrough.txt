# CrewAI Multi-Agent Customer Support System

This tutorial demonstrates how to create a multi-agent system for customer support using CrewAI. Two AI agents collaborate to handle customer inquiries: a Senior Support Representative and a Quality Assurance Specialist.

## üöÄ Quick Start

### Step 1: Install Required Packages

```bash
pip install crewai==0.28.8 crewai_tools==0.1.6 langchain_huggingface
```

### Step 2: Setup and Configuration

```python
# Import libraries and suppress warnings
import warnings
import os
warnings.filterwarnings('ignore')

# Configure OpenAI API
openai_api_key = "your_openai_api_key_here"  # ‚ö†Ô∏è REPLACE WITH YOUR ACTUAL API KEY
os.environ["OPENAI_API_KEY"] = openai_api_key
os.environ["OPENAI_MODEL_NAME"] = 'gpt-3.5-turbo'
```

### Step 3: Import CrewAI Components

```python
from crewai import Agent, Task, Crew
from crewai_tools import SerperDevTool, ScrapeWebsiteTool
```

### Step 4: Define Agents

```python
# Senior Support Representative
support_agent = Agent(
    role="Senior Support Representative",
    goal="Be the most friendly and helpful support representative in your team",
    backstory=(
        "You work at crewAI (https://crewai.com) and are now working on providing "
        "support to {customer}, a super important customer for your company. "
        "You need to make sure that you provide the best support! "
        "Make sure to provide full complete answers, and make no assumptions."
    ),
    allow_delegation=False,
    verbose=True,
)

# Quality Assurance Specialist
support_quality_assurance_agent = Agent(
    role="Support Quality Assurance Specialist",
    goal="Get recognition for providing the best support quality assurance in your team",
    backstory=(
        "You work at crewAI (https://crewai.com) and are now working with your team "
        "on a request from {customer} ensuring that the support representative is "
        "providing the best support possible.\n"
        "You need to make sure that the support representative is providing full "
        "complete answers, and make no assumptions."
    ),
    verbose=True,
)
```

### Step 5: Setup Tools

```python
# Initialize tools
search_tool = SerperDevTool()
scrape_tool = ScrapeWebsiteTool()
docs_scrape_tool = ScrapeWebsiteTool(website_url="https://arxiv.org/abs/1706.03762")
```

### Step 6: Define Tasks

```python
# Task 1: Inquiry Resolution
inquiry_resolution = Task(
    description=(
        "{customer} just reached out with a super important ask:\n"
        "{inquiry}\n\n"
        "{person} from {customer} is the one that reached out. "
        "Make sure to use everything you know to provide the best support possible. "
        "You must strive to provide a complete and accurate response to the customer's inquiry."
    ),
    expected_output=(
        "A detailed, informative response to the customer's inquiry that addresses "
        "all aspects of their question.\n"
        "The response should include references to everything you used to find the answer, "
        "including external data or solutions. Ensure the answer is complete, "
        "leaving no questions unanswered, and maintain a helpful and friendly tone throughout."
    ),
    tools=[docs_scrape_tool],
    agent=support_agent,
)

# Task 2: Quality Assurance Review
quality_assurance_review = Task(
    description=(
        "Review the response drafted by the Senior Support Representative for {customer}'s inquiry. "
        "Ensure that the answer is comprehensive, accurate, and adheres to the high-quality standards "
        "expected for customer support.\n"
        "Verify that all parts of the customer's inquiry have been addressed thoroughly, "
        "with a helpful and friendly tone.\n"
        "Check for references and sources used to find the information, ensuring the response is "
        "well-supported and leaves no questions unanswered."
    ),
    expected_output=(
        "A final, detailed, and informative response ready to be sent to the customer.\n"
        "This response should fully address the customer's inquiry, incorporating all relevant "
        "feedback and improvements.\n"
        "Don't be too formal, we are a chill and cool company but maintain a professional and "
        "friendly tone throughout."
    ),
    agent=support_quality_assurance_agent,
)
```

### Step 7: Create and Run the Crew

```python
# Create the crew
crew = Crew(
    agents=[support_agent, support_quality_assurance_agent],
    tasks=[inquiry_resolution, quality_assurance_review],
    verbose=2,
    memory=True,
)

# Define the customer inquiry
inputs = {
    "customer": "Apple",
    "person": "Steve Jobs",
    "inquiry": "I need help with getting Siri to drastically improve, specifically how can I add elements of AGI to her? Can you provide guidance?"
}

# Execute the crew
result = crew.kickoff(inputs=inputs)
```

### Step 8: Display Results

```python
# For Jupyter notebooks
from IPython.display import Markdown
Markdown(result)

# For regular Python scripts
print(result)
```

## üîß Complete Working Example

Here's the complete code you can copy and paste:

```python
# Complete CrewAI Customer Support System
import warnings
import os
warnings.filterwarnings('ignore')

# API Configuration - REPLACE WITH YOUR KEY
openai_api_key = "your_openai_api_key_here"
os.environ["OPENAI_API_KEY"] = openai_api_key
os.environ["OPENAI_MODEL_NAME"] = 'gpt-3.5-turbo'

# Imports
from crewai import Agent, Task, Crew
from crewai_tools import SerperDevTool, ScrapeWebsiteTool

# Agents
support_agent = Agent(
    role="Senior Support Representative",
    goal="Be the most friendly and helpful support representative in your team",
    backstory=(
        "You work at crewAI (https://crewai.com) and are now working on providing "
        "support to {customer}, a super important customer for your company. "
        "You need to make sure that you provide the best support! "
        "Make sure to provide full complete answers, and make no assumptions."
    ),
    allow_delegation=False,
    verbose=True,
)

support_quality_assurance_agent = Agent(
    role="Support Quality Assurance Specialist",
    goal="Get recognition for providing the best support quality assurance in your team",
    backstory=(
        "You work at crewAI (https://crewai.com) and are now working with your team "
        "on a request from {customer} ensuring that the support representative is "
        "providing the best support possible.\n"
        "You need to make sure that the support representative is providing full "
        "complete answers, and make no assumptions."
    ),
    verbose=True,
)

# Tools
search_tool = SerperDevTool()
scrape_tool = ScrapeWebsiteTool()
docs_scrape_tool = ScrapeWebsiteTool(website_url="https://arxiv.org/abs/1706.03762")

# Tasks
inquiry_resolution = Task(
    description=(
        "{customer} just reached out with a super important ask:\n"
        "{inquiry}\n\n"
        "{person} from {customer} is the one that reached out. "
        "Make sure to use everything you know to provide the best support possible. "
        "You must strive to provide a complete and accurate response to the customer's inquiry."
    ),
    expected_output=(
        "A detailed, informative response to the customer's inquiry that addresses "
        "all aspects of their question.\n"
        "The response should include references to everything you used to find the answer, "
        "including external data or solutions. Ensure the answer is complete, "
        "leaving no questions unanswered, and maintain a helpful and friendly tone throughout."
    ),
    tools=[docs_scrape_tool],
    agent=support_agent,
)

quality_assurance_review = Task(
    description=(
        "Review the response drafted by the Senior Support Representative for {customer}'s inquiry. "
        "Ensure that the answer is comprehensive, accurate, and adheres to the high-quality standards "
        "expected for customer support.\n"
        "Verify that all parts of the customer's inquiry have been addressed thoroughly, "
        "with a helpful and friendly tone.\n"
        "Check for references and sources used to find the information, ensuring the response is "
        "well-supported and leaves no questions unanswered."
    ),
    expected_output=(
        "A final, detailed, and informative response ready to be sent to the customer.\n"
        "This response should fully address the customer's inquiry, incorporating all relevant "
        "feedback and improvements.\n"
        "Don't be too formal, we are a chill and cool company but maintain a professional and "
        "friendly tone throughout."
    ),
    agent=support_quality_assurance_agent,
)

# Create and run crew
crew = Crew(
    agents=[support_agent, support_quality_assurance_agent],
    tasks=[inquiry_resolution, quality_assurance_review],
    verbose=2,
    memory=True,
)

# Execute with sample input
inputs = {
    "customer": "Apple",
    "person": "Steve Jobs",
    "inquiry": "I need help with getting Siri to drastically improve, specifically how can I add elements of AGI to her? Can you provide guidance?"
}

result = crew.kickoff(inputs=inputs)
print(result)
```

## üéØ Customization Examples

### Change the Customer Inquiry

```python
# Tech Support Example
inputs = {
    "customer": "Microsoft",
    "person": "Satya Nadella",
    "inquiry": "How can we integrate advanced AI reasoning capabilities into our Office suite?"
}

# General Support Example
inputs = {
    "customer": "Startup Inc",
    "person": "Jane Smith",
    "inquiry": "What are the best practices for implementing AI chatbots in customer service?"
}
```

### Add More Tools

```python
# Add search tool to the inquiry resolution task
inquiry_resolution = Task(
    # ... (same description and expected_output)
    tools=[docs_scrape_tool, search_tool, scrape_tool],  # Added more tools
    agent=support_agent,
)
```

### Modify Agent Behavior

```python
# More technical support agent
technical_support_agent = Agent(
    role="Technical Support Specialist",
    goal="Provide highly technical and detailed solutions to complex problems",
    backstory=(
        "You are a senior technical expert at crewAI with deep knowledge of AI, "
        "machine learning, and software architecture. You provide detailed, "
        "technical responses with code examples and implementation guidance."
    ),
    allow_delegation=False,
    verbose=True,
)
```

## üêõ Troubleshooting

- **API Key Error**: Make sure to replace `"your_openai_api_key_here"` with your actual OpenAI API key
- **Installation Issues**: Run `pip install --upgrade crewai crewai_tools` if you encounter version conflicts
- **Verbose Output**: Set `verbose=1` or `verbose=False` to reduce output if needed
- **Memory Issues**: Set `memory=False` if you encounter memory-related errors

## üìö Next Steps

1. **Test Different Inquiries**: Try various customer scenarios
2. **Experiment with Tools**: Add or remove tools to see their impact
3. **Customize Agents**: Modify agent roles and backstories
4. **Add More Agents**: Create specialized agents for different support areas
5. **Integrate External APIs**: Connect to your own data sources and APIs